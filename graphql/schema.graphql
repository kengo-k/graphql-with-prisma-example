# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AffectedRowsOutput {
  count: Int!
}

type AggregateTask {
  _avg: TaskAvgAggregate
  _count: TaskCountAggregate
  _max: TaskMaxAggregate
  _min: TaskMinAggregate
  _sum: TaskSumAggregate
}

input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input BoolWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedBoolFilter
  _min: NestedBoolFilter
  equals: Boolean
  not: NestedBoolWithAggregatesFilter
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime!]
}

input IntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int!]
}

type Mutation {
  createOneTask(data: TaskCreateInput!): Task!
  deleteManyTask(where: TaskWhereInput): AffectedRowsOutput!
  deleteOneTask(where: TaskWhereUniqueInput!): Task
  updateManyTask(data: TaskUpdateManyMutationInput!, where: TaskWhereInput): AffectedRowsOutput!
  updateOneTask(data: TaskUpdateInput!, where: TaskWhereUniqueInput!): Task
  upsertOneTask(create: TaskCreateInput!, update: TaskUpdateInput!, where: TaskWhereUniqueInput!): Task!
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedBoolWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedBoolFilter
  _min: NestedBoolFilter
  equals: Boolean
  not: NestedBoolWithAggregatesFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime!]
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

type Query {
  aggregateTask(cursor: TaskWhereUniqueInput, orderBy: [TaskOrderByWithRelationInput!], skip: Int, take: Int, where: TaskWhereInput): AggregateTask!
  findFirstTask(cursor: TaskWhereUniqueInput, distinct: [TaskScalarFieldEnum!], orderBy: [TaskOrderByWithRelationInput!], skip: Int, take: Int, where: TaskWhereInput): Task
  groupByTask(by: [TaskScalarFieldEnum!]!, having: TaskScalarWhereWithAggregatesInput, orderBy: [TaskOrderByWithAggregationInput!], skip: Int, take: Int, where: TaskWhereInput): [TaskGroupBy!]!
  task(where: TaskWhereUniqueInput!): Task
  tasks(cursor: TaskWhereUniqueInput, distinct: [TaskScalarFieldEnum!], orderBy: [TaskOrderByWithRelationInput!], skip: Int, take: Int, where: TaskWhereInput): [Task!]!
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

type Task {
  category: String!
  createdAt: DateTime!
  done: Boolean!
  id: Int!
  priority: Int!
  title: String!
  updatedAt: DateTime!
}

type TaskAvgAggregate {
  id: Float
  priority: Float
}

input TaskAvgOrderByAggregateInput {
  id: SortOrder
  priority: SortOrder
}

type TaskCountAggregate {
  _all: Int!
  category: Int!
  createdAt: Int!
  done: Int!
  id: Int!
  priority: Int!
  title: Int!
  updatedAt: Int!
}

input TaskCountOrderByAggregateInput {
  category: SortOrder
  createdAt: SortOrder
  done: SortOrder
  id: SortOrder
  priority: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

input TaskCreateInput {
  category: String!
  createdAt: DateTime
  done: Boolean
  priority: Int!
  title: String!
  updatedAt: DateTime
}

type TaskGroupBy {
  _avg: TaskAvgAggregate
  _count: TaskCountAggregate
  _max: TaskMaxAggregate
  _min: TaskMinAggregate
  _sum: TaskSumAggregate
  category: String!
  createdAt: DateTime!
  done: Boolean!
  id: Int!
  priority: Int!
  title: String!
  updatedAt: DateTime!
}

type TaskMaxAggregate {
  category: String
  createdAt: DateTime
  done: Boolean
  id: Int
  priority: Int
  title: String
  updatedAt: DateTime
}

input TaskMaxOrderByAggregateInput {
  category: SortOrder
  createdAt: SortOrder
  done: SortOrder
  id: SortOrder
  priority: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

type TaskMinAggregate {
  category: String
  createdAt: DateTime
  done: Boolean
  id: Int
  priority: Int
  title: String
  updatedAt: DateTime
}

input TaskMinOrderByAggregateInput {
  category: SortOrder
  createdAt: SortOrder
  done: SortOrder
  id: SortOrder
  priority: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

input TaskOrderByWithAggregationInput {
  _avg: TaskAvgOrderByAggregateInput
  _count: TaskCountOrderByAggregateInput
  _max: TaskMaxOrderByAggregateInput
  _min: TaskMinOrderByAggregateInput
  _sum: TaskSumOrderByAggregateInput
  category: SortOrder
  createdAt: SortOrder
  done: SortOrder
  id: SortOrder
  priority: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

input TaskOrderByWithRelationInput {
  category: SortOrder
  createdAt: SortOrder
  done: SortOrder
  id: SortOrder
  priority: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

enum TaskScalarFieldEnum {
  category
  createdAt
  done
  id
  priority
  title
  updatedAt
}

input TaskScalarWhereWithAggregatesInput {
  AND: [TaskScalarWhereWithAggregatesInput!]
  NOT: [TaskScalarWhereWithAggregatesInput!]
  OR: [TaskScalarWhereWithAggregatesInput!]
  category: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  done: BoolWithAggregatesFilter
  id: IntWithAggregatesFilter
  priority: IntWithAggregatesFilter
  title: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type TaskSumAggregate {
  id: Int
  priority: Int
}

input TaskSumOrderByAggregateInput {
  id: SortOrder
  priority: SortOrder
}

input TaskUpdateInput {
  category: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  done: BoolFieldUpdateOperationsInput
  priority: IntFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TaskUpdateManyMutationInput {
  category: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  done: BoolFieldUpdateOperationsInput
  priority: IntFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TaskWhereInput {
  AND: [TaskWhereInput!]
  NOT: [TaskWhereInput!]
  OR: [TaskWhereInput!]
  category: StringFilter
  createdAt: DateTimeFilter
  done: BoolFilter
  id: IntFilter
  priority: IntFilter
  title: StringFilter
  updatedAt: DateTimeFilter
}

input TaskWhereUniqueInput {
  id: Int
}
